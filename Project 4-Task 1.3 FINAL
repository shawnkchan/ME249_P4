{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "951ea808",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "'''\n",
    "Function that takes in two dataframe columns and plots a log-log graph\n",
    "Follows standardised formatting\n",
    "@input recorded: dataframe column of recorded data\n",
    "@input predicted: dataframe column of the predicted value\n",
    "@input xmin: lower bound of graph's x axis\n",
    "@input xmax: upper bound of graph's x axis\n",
    "@input ymin: lower bound of graph's y axis\n",
    "@input ymax: upper bound of graph's y axis\n",
    "@input xTitle: title for x axis\n",
    "@input yTitle: title for y axis\n",
    "@output log log graph of the preducted values against recorded values\n",
    "'''\n",
    "\n",
    "def logLogPlotter(recorded, predicted, xmin, xmax, ymin, ymax, xTitle, yTitle, unit):\n",
    "    x = recorded\n",
    "    y = predicted\n",
    "\n",
    "    coefficients = np.polyfit(np.log(x), np.log(y), 1)\n",
    "    line_function = np.poly1d(coefficients)\n",
    "\n",
    "    # Create a range for predicted values for the fit line\n",
    "    x_vals = np.linspace(min(x), max(y), 400)\n",
    "    y_vals = np.exp(line_function(np.log(x_vals)))\n",
    "\n",
    "    #calculate similarity measures\n",
    "    slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)\n",
    "\n",
    "    #best fit line and y = x line\n",
    "    plt.scatter(x, y, c='red', marker='x')\n",
    "    plt.plot(x_vals, y_vals, color='red', label=f'Fit: y = {coefficients[0]:.2f}x + {coefficients[1]:.2f}')\n",
    "    plt.axline((0, 0), (1,1),color='black',linestyle='--', label=f'y=x, R^2 = {r_value ** 2}',)\n",
    "\n",
    "    #visuals\n",
    "    font_family = 'Times New Roman'\n",
    "    title_font_size=17\n",
    "    label_font_size=15\n",
    "    legend_tick_font_size=12\n",
    "\n",
    "    plt.title(f'Predicted {yTitle} against Recorded {xTitle}', fontsize=title_font_size, fontfamily=font_family)\n",
    "    plt.xlabel(f'Recorded {xTitle} ', fontsize=label_font_size, fontfamily=font_family)\n",
    "    plt.ylabel(f'Predicted {yTitle} )', fontsize=label_font_size, fontfamily=font_family)\n",
    "\n",
    "    plt.legend(fontsize = legend_tick_font_size)\n",
    "    plt.loglog()\n",
    "    plt.xlim(xmax=xmax, xmin=xmin)\n",
    "    plt.ylim(ymax=ymax, ymin=ymin)\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "978eb101",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''>>>>> start CodeP4.1F23\n",
    "V.P. Carey ME249, Fall 2023\n",
    "Keras Neural Network Modeling '''\n",
    "#import useful packages\n",
    "import keras\n",
    "import pandas as pd\n",
    "from keras.models import Sequential\n",
    "import numpy as np\n",
    "import keras.backend as kb\n",
    "import tensorflow as tf\n",
    "#the following 2 lines are only needed for Mac OS machines\n",
    "import os\n",
    "os.environ['KMP_DUPLICATE_LIB_OK']='True'\n",
    "# define meadian values of input variables - add your values here\n",
    "\n",
    "import statistics\n",
    "import numpy\n",
    "xdata = []\n",
    "ydata = []\n",
    "#xdata.append([ Di(m), qoflux (kW/m^2), exit quality, max wall temperature (deg C)])\n",
    "xdata.append([0.008, 550, 0.525, 306.7])\n",
    "xdata.append([0.008, 650, 0.525, 298.5])\n",
    "xdata.append([0.008, 750, 0.525, 294.2])\n",
    "xdata.append([0.008, 850, 0.525, 290.2])\n",
    "xdata.append([0.008, 950, 0.524, 286.9])\n",
    "xdata.append([0.008, 1050, 0.524, 284.1])\n",
    "xdata.append([0.008, 1150, 0.525, 281.7])\n",
    "xdata.append([0.008, 850, 0.524, 290.31])\n",
    "xdata.append([0.008, 550, 0.734, 307.9])\n",
    "xdata.append([0.008, 750, 0.735, 295.5])\n",
    "xdata.append([0.008, 950, 0.735, 287.8])\n",
    "xdata.append([0.008, 1050, 0.735, 285.0])\n",
    "xdata.append([0.008, 1150, 0.735, 282.5])\n",
    "xdata.append([0.008, 850, 0.734, 291.3])\n",
    "xdata.append([0.008, 550, 0.945, 308.6])\n",
    "xdata.append([0.008, 750, 0.945, 296.2])\n",
    "xdata.append([0.008, 950, 0.945, 288.5])\n",
    "xdata.append([0.008, 1150, 0.945, 283.1])\n",
    "xdata.append([0.008, 850, 0.945, 291.9])\n",
    "xdata.append([0.011, 550, 0.525, 328.0])\n",
    "xdata.append([0.011, 750, 0.525, 311.2])\n",
    "xdata.append([0.011, 950, 0.525, 300.8])\n",
    "xdata.append([0.011, 1150, 0.525, 293.6])\n",
    "xdata.append([0.011, 850, 0.525, 305.5])\n",
    "xdata.append([0.011, 550, 0.735, 329.6])\n",
    "xdata.append([0.011, 750, 0.735, 312.6])\n",
    "xdata.append([0.011, 950, 0.735, 302.0])\n",
    "xdata.append([0.011, 1050, 0.735, 299.4])\n",
    "xdata.append([0.011, 1150, 0.735, 294.8])\n",
    "xdata.append([0.011, 850, 0.735, 306.8])\n",
    "xdata.append([0.011, 550, 0.945, 330.7])\n",
    "xdata.append([0.011, 750, 0.945, 313.6])\n",
    "xdata.append([0.011, 950, 0.944, 302.9])\n",
    "xdata.append([0.011, 1150, 0.945, 295.6])\n",
    "xdata.append([0.011, 850, 0.944, 307.7])\n",
    "xdata.append([0.011, 700, 0.734, 324.7])\n",
    "xdata.append([0.013, 550, 0.525, 342.2])\n",
    "xdata.append([0.013, 750, 0.524, 322.3])\n",
    "xdata.append([0.013, 950, 0.524, 310.0])\n",
    "xdata.append([0.013, 1150, 0.525, 301.6])\n",
    "xdata.append([0.013, 850, 0.524, 315.5])\n",
    "xdata.append([0.013, 550, 0.734, 344.1])\n",
    "xdata.append([0.013, 750, 0.735, 324.0])\n",
    "xdata.append([0.013, 950, 0.735, 311.5])\n",
    "xdata.append([0.013, 1050, 0.735, 306.3])\n",
    "xdata.append([0.013, 1150, 0.735, 302.9])\n",
    "xdata.append([0.013, 850, 0.734, 317.1])\n",
    "xdata.append([0.013, 550, 0.945, 345.3])\n",
    "xdata.append([0.013, 750, 0.944, 325.1])\n",
    "xdata.append([0.013, 950, 0.944, 312.5])\n",
    "xdata.append([0.013, 1150, 0.945, 303.9])\n",
    "xdata.append([0.013, 850, 0.945, 318.2])\n",
    "\n",
    "#data.append([mdot (kg/s)])\n",
    "ydata.append([0.06157])\n",
    "ydata.append([0.07269])\n",
    "ydata.append([0.08396])\n",
    "ydata.append([0.09347])\n",
    "ydata.append([0.10635])\n",
    "ydata.append([0.11521])\n",
    "ydata.append([0.1287])\n",
    "ydata.append([0.09516])\n",
    "ydata.append([0.04398])\n",
    "ydata.append([0.05997])\n",
    "ydata.append([0.07596])\n",
    "ydata.append([0.08343])\n",
    "ydata.append([0.0919])\n",
    "ydata.append([0.06797])\n",
    "ydata.append([0.0342])\n",
    "ydata.append([0.04664])\n",
    "ydata.append([0.05908])\n",
    "ydata.append([0.0715])\n",
    "ydata.append([0.05286])\n",
    "ydata.append([0.0846])\n",
    "ydata.append([0.1154])\n",
    "ydata.append([0.1462])\n",
    "ydata.append([0.177])\n",
    "ydata.append([0.1308])\n",
    "ydata.append([0.06047])\n",
    "ydata.append([0.08246])\n",
    "ydata.append([0.1044])\n",
    "ydata.append([0.1134])\n",
    "ydata.append([0.1264])\n",
    "ydata.append([0.0934])\n",
    "ydata.append([0.047])\n",
    "ydata.append([0.06413])\n",
    "ydata.append([0.08124])\n",
    "ydata.append([0.09834])\n",
    "ydata.append([0.072691])\n",
    "ydata.append([0.087196])\n",
    "ydata.append([0.10005])\n",
    "ydata.append([0.13644])\n",
    "ydata.append([0.17282])\n",
    "ydata.append([0.2092])\n",
    "ydata.append([0.15463])\n",
    "ydata.append([0.07147])\n",
    "ydata.append([0.09745])\n",
    "ydata.append([0.12344])\n",
    "ydata.append([0.13302])\n",
    "ydata.append([0.1494])\n",
    "ydata.append([0.11045])\n",
    "ydata.append([0.05558])\n",
    "ydata.append([0.0758])\n",
    "ydata.append([0.09601])\n",
    "ydata.append([0.1162])\n",
    "ydata.append([0.0859])\n",
    "xarray= numpy.array(xdata)\n",
    "yarray= numpy.array(ydata)\n",
    "x_original = np.array(xdata)\n",
    "y_original = np.array(ydata)\n",
    "# print (xdata)\n",
    "# print (xarray)\n",
    "# print (ydata)\n",
    "# print (yarray)\n",
    "\n",
    "#convert to:\n",
    "# median values of output variables\n",
    "ND=len(xarray)\n",
    "Diall = [row[0] for row in xdata]\n",
    "Dimed=statistics.median(Diall)\n",
    "q0all = [row[1] for row in xdata]\n",
    "q0med=statistics.median(q0all)\n",
    "xeall = [row[2] for row in xdata]\n",
    "xemed=statistics.median(xeall)\n",
    "Twall = [row[3] for row in xdata]\n",
    "Twmed=statistics.median(Twall)\n",
    "\n",
    "mall = [row[0] for row in ydata]\n",
    "mmed=statistics.median(mall)\n",
    "\n",
    "xdata = []\n",
    "ydata = []\n",
    "for i in range(ND):\n",
    "    xdata.append([xarray[i,0]/Dimed,xarray[i,1]/q0med,xarray[i,2]/xemed,xarray[i,3]/Twmed])\n",
    "    ydata.append([yarray[i,0]/mmed])\n",
    "\n",
    "xarray= np.array(xdata)\n",
    "yarray= np.array(ydata)\n",
    "\n",
    "#print (yarray)\n",
    "\n",
    "data_inputs = np.array(xdata)\n",
    "data_outputs = np.array(ydata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5c9abf88",
   "metadata": {},
   "outputs": [],
   "source": [
    "xdata_df = pd.DataFrame(x_original, columns=['Di', 'qoflux', 'xe', 'Tw'])\n",
    "ydata_df = pd.DataFrame(y_original, columns=['mdot'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3376dd5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "xdata_normalized = xdata_df.divide(xdata_df.median())\n",
    "ydata_normalized = ydata_df.divide(ydata_df.median())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "379a75b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.         1.23529412 1.         0.98260584]\n",
      " [1.         1.11764706 1.28435374 0.99409255]\n",
      " [0.72727273 1.         1.28571429 0.95799147]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "training_input,validation_input,training_output,validation_output = train_test_split(xarray,\n",
    "yarray, test_size=0.25, random_state=13)\n",
    "# print to check the shape of training and validation set\n",
    "training_input= np.array(training_input)#[:,[1,2,3]])\n",
    "training_output= np.array(training_output)\n",
    "validation_input= np.array(validation_input)#[:,[1,2,3]])\n",
    "validation_output= np.array(validation_output)\n",
    "\n",
    "print(validation_input)\n",
    "\n",
    "xarray=training_input\n",
    "yarray=training_output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "c2dc6a7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = pd.DataFrame(training_input, columns=['Di', 'qoflux', 'xe', 'Tw'])\n",
    "x_validate = pd.DataFrame(validation_input,columns=['Di', 'qoflux', 'xe', 'Tw'])\n",
    "\n",
    "y_train = pd.DataFrame(training_output, columns=['mdot'])\n",
    "y_validate = pd.DataFrame(validation_output, columns=['mdot'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "60e227b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define neural network model\n",
    "#As seen below, we have created four dense layers.\n",
    "#A dense layer is a layer in neural network that’s fully connected.\n",
    "#In other words, all the neurons in one layer are connected to all other neurons in the next layer.\n",
    "#In the first layer, we need to provide the input shape, which is 1 in our case.\n",
    "#The activation function we have chosen is elu, which stands for exponential linear unit. .\n",
    "from keras import backend as K\n",
    "#initialize weights with values between -0.2 and 0.5\n",
    "initializer = keras.initializers.RandomUniform(minval= -0.2, maxval=0.5)\n",
    "model = keras.Sequential([\n",
    "keras.layers.Dense(8, activation=K.elu, input_shape=[4], kernel_initializer=initializer),\n",
    "keras.layers.Dense(12, activation=K.elu, kernel_initializer=initializer),\n",
    "keras.layers.Dense(16, activation=K.elu, kernel_initializer=initializer),\n",
    "keras.layers.Dense(8, activation=K.elu, kernel_initializer=initializer),\n",
    "keras.layers.Dense(1, kernel_initializer=initializer)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "357a03bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We’re using RMSprop as our optimizer here. RMSprop stands for Root Mean Square Propagation.\n",
    "#It’s one of the most popular gradient descent optimization algorithms for deep learning networks.\n",
    "#RMSprop is an optimizer that’s reliable and fast.\n",
    "#We’re compiling the mode using the model.compile function. The loss function used here\n",
    "#is mean squared error. After the compilation of the model, we’ll use the fit method with ~500 epochs.\n",
    "#Number of epochs can be varied.\n",
    "#from tf.keras import optimizers\n",
    "rms = keras.optimizers.RMSprop(0.01)\n",
    "model.compile(loss='mean_absolute_error',optimizer=rms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "07a87d24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/800\n",
      "1/1 [==============================] - 0s 521us/step - loss: 0.0980\n",
      "Epoch 2/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.3193\n",
      "Epoch 3/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1371\n",
      "Epoch 4/800\n",
      "1/1 [==============================] - 0s 541us/step - loss: 0.1793\n",
      "Epoch 5/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.1886\n",
      "Epoch 6/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1944\n",
      "Epoch 7/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0775\n",
      "Epoch 8/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1572\n",
      "Epoch 9/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1440\n",
      "Epoch 10/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0604\n",
      "Epoch 11/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0677\n",
      "Epoch 12/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.1291\n",
      "Epoch 13/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1618\n",
      "Epoch 14/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0374\n",
      "Epoch 15/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0427\n",
      "Epoch 16/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0936\n",
      "Epoch 17/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1691\n",
      "Epoch 18/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0359\n",
      "Epoch 19/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0560\n",
      "Epoch 20/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1374\n",
      "Epoch 21/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0517\n",
      "Epoch 22/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1536\n",
      "Epoch 23/800\n",
      "1/1 [==============================] - 0s 992us/step - loss: 0.0497\n",
      "Epoch 24/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0402\n",
      "Epoch 25/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1300\n",
      "Epoch 26/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0361\n",
      "Epoch 27/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0429\n",
      "Epoch 28/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0849\n",
      "Epoch 29/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1674\n",
      "Epoch 30/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0350\n",
      "Epoch 31/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0578\n",
      "Epoch 32/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1365\n",
      "Epoch 33/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0485\n",
      "Epoch 34/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1505\n",
      "Epoch 35/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0482\n",
      "Epoch 36/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0413\n",
      "Epoch 37/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1293\n",
      "Epoch 38/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0500\n",
      "Epoch 39/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0937\n",
      "Epoch 40/800\n",
      "1/1 [==============================] - 0s 993us/step - loss: 0.0895\n",
      "Epoch 41/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1153\n",
      "Epoch 42/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0391\n",
      "Epoch 43/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0395\n",
      "Epoch 44/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0850\n",
      "Epoch 45/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1451\n",
      "Epoch 46/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0399\n",
      "Epoch 47/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0642\n",
      "Epoch 48/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1399\n",
      "Epoch 49/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0891\n",
      "Epoch 50/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0650\n",
      "Epoch 51/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0949\n",
      "Epoch 52/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0339\n",
      "Epoch 53/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0850\n",
      "Epoch 54/800\n",
      "1/1 [==============================] - 0s 5ms/step - loss: 0.0732\n",
      "Epoch 55/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1191\n",
      "Epoch 56/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0540\n",
      "Epoch 57/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0324\n",
      "Epoch 58/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.0385\n",
      "Epoch 59/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1350\n",
      "Epoch 60/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1044\n",
      "Epoch 61/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0511\n",
      "Epoch 62/800\n",
      "1/1 [==============================] - 0s 169us/step - loss: 0.1038\n",
      "Epoch 63/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0506\n",
      "Epoch 64/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0882\n",
      "Epoch 65/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1042\n",
      "Epoch 66/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1056\n",
      "Epoch 67/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0416\n",
      "Epoch 68/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1085\n",
      "Epoch 69/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0386\n",
      "Epoch 70/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0547\n",
      "Epoch 71/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0827\n",
      "Epoch 72/800\n",
      "1/1 [==============================] - 0s 746us/step - loss: 0.1178\n",
      "Epoch 73/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0483\n",
      "Epoch 74/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0513\n",
      "Epoch 75/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0550\n",
      "Epoch 76/800\n",
      "1/1 [==============================] - 0s 708us/step - loss: 0.0862\n",
      "Epoch 77/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1060\n",
      "Epoch 78/800\n",
      "1/1 [==============================] - 0s 998us/step - loss: 0.1042\n",
      "Epoch 79/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0399\n",
      "Epoch 80/800\n",
      "1/1 [==============================] - 0s 891us/step - loss: 0.0719\n",
      "Epoch 81/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1387\n",
      "Epoch 82/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0928\n",
      "Epoch 83/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0668\n",
      "Epoch 84/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0987\n",
      "Epoch 85/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0324\n",
      "Epoch 86/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0340\n",
      "Epoch 87/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0853\n",
      "Epoch 88/800\n",
      "1/1 [==============================] - 0s 632us/step - loss: 0.1562\n",
      "Epoch 89/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0422\n",
      "Epoch 90/800\n",
      "1/1 [==============================] - 0s 998us/step - loss: 0.1299\n",
      "Epoch 91/800\n",
      "1/1 [==============================] - 0s 998us/step - loss: 0.0411\n",
      "Epoch 92/800\n",
      "1/1 [==============================] - 0s 902us/step - loss: 0.0553\n",
      "Epoch 93/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0770\n",
      "Epoch 94/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1193\n",
      "Epoch 95/800\n",
      "1/1 [==============================] - 0s 996us/step - loss: 0.0363\n",
      "Epoch 96/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0382\n",
      "Epoch 97/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0791\n",
      "Epoch 98/800\n",
      "1/1 [==============================] - 0s 997us/step - loss: 0.1107\n",
      "Epoch 99/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0825\n",
      "Epoch 100/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1237\n",
      "Epoch 101/800\n",
      "1/1 [==============================] - 0s 424us/step - loss: 0.0540\n",
      "Epoch 102/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0591\n",
      "Epoch 103/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0947\n",
      "Epoch 104/800\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1292\n",
      "Epoch 105/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0399\n",
      "Epoch 106/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0500\n",
      "Epoch 107/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0745\n",
      "Epoch 108/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1392\n",
      "Epoch 109/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0366\n",
      "Epoch 110/800\n",
      "1/1 [==============================] - 0s 998us/step - loss: 0.0621\n",
      "Epoch 111/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1342\n",
      "Epoch 112/800\n",
      "1/1 [==============================] - 0s 773us/step - loss: 0.0858\n",
      "Epoch 113/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0641\n",
      "Epoch 114/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0903\n",
      "Epoch 115/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0367\n",
      "Epoch 116/800\n",
      "1/1 [==============================] - 0s 709us/step - loss: 0.0802\n",
      "Epoch 117/800\n",
      "1/1 [==============================] - 0s 994us/step - loss: 0.0486\n",
      "Epoch 118/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1453\n",
      "Epoch 119/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.0403\n",
      "Epoch 120/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0496\n",
      "Epoch 121/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1171\n",
      "Epoch 122/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0568\n",
      "Epoch 123/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.1320\n",
      "Epoch 124/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0547\n",
      "Epoch 125/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0363\n",
      "Epoch 126/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0903\n",
      "Epoch 127/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1426\n",
      "Epoch 128/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0367\n",
      "Epoch 129/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0351\n",
      "Epoch 130/800\n",
      "1/1 [==============================] - 0s 617us/step - loss: 0.0824\n",
      "Epoch 131/800\n",
      "1/1 [==============================] - 0s 749us/step - loss: 0.0987\n",
      "Epoch 132/800\n",
      "1/1 [==============================] - 0s 497us/step - loss: 0.1021\n",
      "Epoch 133/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1152\n",
      "Epoch 134/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0503\n",
      "Epoch 135/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0517\n",
      "Epoch 136/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0482\n",
      "Epoch 137/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0829\n",
      "Epoch 138/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0852\n",
      "Epoch 139/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1204\n",
      "Epoch 140/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0459\n",
      "Epoch 141/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0508\n",
      "Epoch 142/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0472\n",
      "Epoch 143/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0821\n",
      "Epoch 144/800\n",
      "1/1 [==============================] - 0s 963us/step - loss: 0.0938\n",
      "Epoch 145/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1221\n",
      "Epoch 146/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0509\n",
      "Epoch 147/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0500\n",
      "Epoch 148/800\n",
      "1/1 [==============================] - 0s 958us/step - loss: 0.0491\n",
      "Epoch 149/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0845\n",
      "Epoch 150/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.1098\n",
      "Epoch 151/800\n",
      "1/1 [==============================] - 0s 514us/step - loss: 0.1074\n",
      "Epoch 152/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0512\n",
      "Epoch 153/800\n",
      "1/1 [==============================] - 0s 956us/step - loss: 0.0474\n",
      "Epoch 154/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0535\n",
      "Epoch 155/800\n",
      "1/1 [==============================] - 0s 537us/step - loss: 0.0852\n",
      "Epoch 156/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1133\n",
      "Epoch 157/800\n",
      "1/1 [==============================] - 0s 846us/step - loss: 0.1019\n",
      "Epoch 158/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0601\n",
      "Epoch 159/800\n",
      "1/1 [==============================] - 0s 658us/step - loss: 0.1058\n",
      "Epoch 160/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0313\n",
      "Epoch 161/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0325\n",
      "Epoch 162/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0915\n",
      "Epoch 163/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0758\n",
      "Epoch 164/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1246\n",
      "Epoch 165/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0555\n",
      "Epoch 166/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0296\n",
      "Epoch 167/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0361\n",
      "Epoch 168/800\n",
      "1/1 [==============================] - 0s 667us/step - loss: 0.0956\n",
      "Epoch 169/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0781\n",
      "Epoch 170/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1316\n",
      "Epoch 171/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0492\n",
      "Epoch 172/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0278\n",
      "Epoch 173/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0383\n",
      "Epoch 174/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1036\n",
      "Epoch 175/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0984\n",
      "Epoch 176/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1141\n",
      "Epoch 177/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0603\n",
      "Epoch 178/800\n",
      "1/1 [==============================] - 0s 301us/step - loss: 0.0585\n",
      "Epoch 179/800\n",
      "1/1 [==============================] - 0s 317us/step - loss: 0.0999\n",
      "Epoch 180/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.1388\n",
      "Epoch 181/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0387\n",
      "Epoch 182/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0923\n",
      "Epoch 183/800\n",
      "1/1 [==============================] - 0s 995us/step - loss: 0.0982\n",
      "Epoch 184/800\n",
      "1/1 [==============================] - 0s 990us/step - loss: 0.1069\n",
      "Epoch 185/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0475\n",
      "Epoch 186/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0700\n",
      "Epoch 187/800\n",
      "1/1 [==============================] - 0s 619us/step - loss: 0.1122\n",
      "Epoch 188/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0898\n",
      "Epoch 189/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0492\n",
      "Epoch 190/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1227\n",
      "Epoch 191/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0454\n",
      "Epoch 192/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0271\n",
      "Epoch 193/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0347\n",
      "Epoch 194/800\n",
      "1/1 [==============================] - 0s 65us/step - loss: 0.0524\n",
      "Epoch 195/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1286\n",
      "Epoch 196/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0903\n",
      "Epoch 197/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0615\n",
      "Epoch 198/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1250\n",
      "Epoch 199/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0512\n",
      "Epoch 200/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0256\n",
      "Epoch 201/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0360\n",
      "Epoch 202/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0960\n",
      "Epoch 203/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0881\n",
      "Epoch 204/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.1083\n",
      "Epoch 205/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0542\n",
      "Epoch 206/800\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1118\n",
      "Epoch 207/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0470\n",
      "Epoch 208/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0563\n",
      "Epoch 209/800\n",
      "1/1 [==============================] - 0s 808us/step - loss: 0.0732\n",
      "Epoch 210/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1189\n",
      "Epoch 211/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0352\n",
      "Epoch 212/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0295\n",
      "Epoch 213/800\n",
      "1/1 [==============================] - 0s 991us/step - loss: 0.0690\n",
      "Epoch 214/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1100\n",
      "Epoch 215/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1073\n",
      "Epoch 216/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0552\n",
      "Epoch 217/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0692\n",
      "Epoch 218/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1165\n",
      "Epoch 219/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0896\n",
      "Epoch 220/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0517\n",
      "Epoch 221/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1225\n",
      "Epoch 222/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0403\n",
      "Epoch 223/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0428\n",
      "Epoch 224/800\n",
      "1/1 [==============================] - 0s 913us/step - loss: 0.0952\n",
      "Epoch 225/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1038\n",
      "Epoch 226/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0538\n",
      "Epoch 227/800\n",
      "1/1 [==============================] - 0s 6ms/step - loss: 0.0650\n",
      "Epoch 228/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1175\n",
      "Epoch 229/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0812\n",
      "Epoch 230/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0781\n",
      "Epoch 231/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0866\n",
      "Epoch 232/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0306\n",
      "Epoch 233/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0771\n",
      "Epoch 234/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0714\n",
      "Epoch 235/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1080\n",
      "Epoch 236/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0507\n",
      "Epoch 237/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0485\n",
      "Epoch 238/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0402\n",
      "Epoch 239/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1114\n",
      "Epoch 240/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0659\n",
      "Epoch 241/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0991\n",
      "Epoch 242/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0267\n",
      "Epoch 243/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0286\n",
      "Epoch 244/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1308\n",
      "Epoch 245/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1165\n",
      "Epoch 246/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0530\n",
      "Epoch 247/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1016\n",
      "Epoch 248/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.0272\n",
      "Epoch 249/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0338\n",
      "Epoch 250/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1358\n",
      "Epoch 251/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0908\n",
      "Epoch 252/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0585\n",
      "Epoch 253/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1248\n",
      "Epoch 254/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0454\n",
      "Epoch 255/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0255\n",
      "Epoch 256/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0321\n",
      "Epoch 257/800\n",
      "1/1 [==============================] - 0s 998us/step - loss: 0.0535\n",
      "Epoch 258/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0978\n",
      "Epoch 259/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.1246\n",
      "Epoch 260/800\n",
      "1/1 [==============================] - 0s 358us/step - loss: 0.0411\n",
      "Epoch 261/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1336\n",
      "Epoch 262/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0428\n",
      "Epoch 263/800\n",
      "1/1 [==============================] - 0s 5ms/step - loss: 0.0268\n",
      "Epoch 264/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0469\n",
      "Epoch 265/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1202\n",
      "Epoch 266/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1094\n",
      "Epoch 267/800\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 0.0541\n",
      "Epoch 268/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1198\n",
      "Epoch 269/800\n",
      "1/1 [==============================] - 0s 345us/step - loss: 0.0337\n",
      "Epoch 270/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0424\n",
      "Epoch 271/800\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.1144\n",
      "Epoch 272/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0787\n",
      "Epoch 273/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0993\n",
      "Epoch 274/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0461\n",
      "Epoch 275/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0783\n",
      "Epoch 276/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1044\n",
      "Epoch 277/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0928\n",
      "Epoch 278/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0451\n",
      "Epoch 279/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0927\n",
      "Epoch 280/800\n",
      "1/1 [==============================] - 0s 969us/step - loss: 0.0525\n",
      "Epoch 281/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0935\n",
      "Epoch 282/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.0537\n",
      "Epoch 283/800\n",
      "1/1 [==============================] - 0s 324us/step - loss: 0.0396\n",
      "Epoch 284/800\n",
      "1/1 [==============================] - 0s 749us/step - loss: 0.0966\n",
      "Epoch 285/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1007\n",
      "Epoch 286/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0428\n",
      "Epoch 287/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0426\n",
      "Epoch 288/800\n",
      "1/1 [==============================] - 0s 880us/step - loss: 0.1619\n",
      "Epoch 289/800\n",
      "1/1 [==============================] - 0s 602us/step - loss: 0.0652\n",
      "Epoch 290/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0841\n",
      "Epoch 291/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0977\n",
      "Epoch 292/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0506\n",
      "Epoch 293/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0631\n",
      "Epoch 294/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1018\n",
      "Epoch 295/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0812\n",
      "Epoch 296/800\n",
      "1/1 [==============================] - 0s 749us/step - loss: 0.0490\n",
      "Epoch 297/800\n",
      "1/1 [==============================] - 0s 805us/step - loss: 0.0848\n",
      "Epoch 298/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0330\n",
      "Epoch 299/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0683\n",
      "Epoch 300/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0975\n",
      "Epoch 301/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0754\n",
      "Epoch 302/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0673\n",
      "Epoch 303/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1066\n",
      "Epoch 304/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0501\n",
      "Epoch 305/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0298\n",
      "Epoch 306/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0639\n",
      "Epoch 307/800\n",
      "1/1 [==============================] - 0s 425us/step - loss: 0.1015\n",
      "Epoch 308/800\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0854\n",
      "Epoch 309/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1147\n",
      "Epoch 310/800\n",
      "1/1 [==============================] - 0s 996us/step - loss: 0.0511\n",
      "Epoch 311/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0432\n",
      "Epoch 312/800\n",
      "1/1 [==============================] - 0s 994us/step - loss: 0.1013\n",
      "Epoch 313/800\n",
      "1/1 [==============================] - 0s 5ms/step - loss: 0.1114\n",
      "Epoch 314/800\n",
      "1/1 [==============================] - 0s 706us/step - loss: 0.0493\n",
      "Epoch 315/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0891\n",
      "Epoch 316/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0516\n",
      "Epoch 317/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.1225\n",
      "Epoch 318/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0486\n",
      "Epoch 319/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0223\n",
      "Epoch 320/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.0237\n",
      "Epoch 321/800\n",
      "1/1 [==============================] - 0s 879us/step - loss: 0.0549\n",
      "Epoch 322/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1132\n",
      "Epoch 323/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0922\n",
      "Epoch 324/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0638\n",
      "Epoch 325/800\n",
      "1/1 [==============================] - 0s 811us/step - loss: 0.1046\n",
      "Epoch 326/800\n",
      "1/1 [==============================] - 0s 318us/step - loss: 0.0456\n",
      "Epoch 327/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0240\n",
      "Epoch 328/800\n",
      "1/1 [==============================] - 0s 4ms/step - loss: 0.0881\n",
      "Epoch 329/800\n",
      "1/1 [==============================] - 0s 712us/step - loss: 0.1080\n",
      "Epoch 330/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0819\n",
      "Epoch 331/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0421\n",
      "Epoch 332/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1007\n",
      "Epoch 333/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0633\n",
      "Epoch 334/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0657\n",
      "Epoch 335/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1048\n",
      "Epoch 336/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0838\n",
      "Epoch 337/800\n",
      "1/1 [==============================] - 0s 894us/step - loss: 0.0489\n",
      "Epoch 338/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0653\n",
      "Epoch 339/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1114\n",
      "Epoch 340/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0819\n",
      "Epoch 341/800\n",
      "1/1 [==============================] - 0s 505us/step - loss: 0.0664\n",
      "Epoch 342/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0966\n",
      "Epoch 343/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0340\n",
      "Epoch 344/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0811\n",
      "Epoch 345/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0894\n",
      "Epoch 346/800\n",
      "1/1 [==============================] - 0s 626us/step - loss: 0.0923\n",
      "Epoch 347/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0556\n",
      "Epoch 348/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0303\n",
      "Epoch 349/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0612\n",
      "Epoch 350/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0983\n",
      "Epoch 351/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0904\n",
      "Epoch 352/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0835\n",
      "Epoch 353/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0585\n",
      "Epoch 354/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1118\n",
      "Epoch 355/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0490\n",
      "Epoch 356/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0262\n",
      "Epoch 357/800\n",
      "1/1 [==============================] - 0s 666us/step - loss: 0.0778\n",
      "Epoch 358/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0981\n",
      "Epoch 359/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0727\n",
      "Epoch 360/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0469\n",
      "Epoch 361/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1226\n",
      "Epoch 362/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0464\n",
      "Epoch 363/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0233\n",
      "Epoch 364/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0376\n",
      "Epoch 365/800\n",
      "1/1 [==============================] - 0s 888us/step - loss: 0.1112\n",
      "Epoch 366/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0972\n",
      "Epoch 367/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0590\n",
      "Epoch 368/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1096\n",
      "Epoch 369/800\n",
      "1/1 [==============================] - 0s 893us/step - loss: 0.0475\n",
      "Epoch 370/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0259\n",
      "Epoch 371/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1178\n",
      "Epoch 372/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0865\n",
      "Epoch 373/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0528\n",
      "Epoch 374/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0845\n",
      "Epoch 375/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0609\n",
      "Epoch 376/800\n",
      "1/1 [==============================] - 0s 776us/step - loss: 0.1143\n",
      "Epoch 377/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0596\n",
      "Epoch 378/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0234\n",
      "Epoch 379/800\n",
      "1/1 [==============================] - 0s 63us/step - loss: 0.0324\n",
      "Epoch 380/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1147\n",
      "Epoch 381/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0909\n",
      "Epoch 382/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0639\n",
      "Epoch 383/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1034\n",
      "Epoch 384/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0322\n",
      "Epoch 385/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0399\n",
      "Epoch 386/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.1888\n",
      "Epoch 387/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0671\n",
      "Epoch 388/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0676\n",
      "Epoch 389/800\n",
      "1/1 [==============================] - 0s 268us/step - loss: 0.0982\n",
      "Epoch 390/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0432\n",
      "Epoch 391/800\n",
      "1/1 [==============================] - 0s 0s/step - loss: 0.0624\n",
      "Epoch 392/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0961\n",
      "Epoch 393/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0784\n",
      "Epoch 394/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0486\n",
      "Epoch 395/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0779\n",
      "Epoch 396/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0622\n",
      "Epoch 397/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1078\n",
      "Epoch 398/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0547\n",
      "Epoch 399/800\n",
      "1/1 [==============================] - 0s 675us/step - loss: 0.0230\n",
      "Epoch 400/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.0296\n",
      "Epoch 401/800\n",
      "1/1 [==============================] - 0s 3ms/step - loss: 0.0693\n",
      "Epoch 402/800\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1224\n",
      "Epoch 403/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0337\n",
      "Epoch 404/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0371\n",
      "Epoch 405/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.1859\n",
      "Epoch 406/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0629\n",
      "Epoch 407/800\n",
      "1/1 [==============================] - 0s 1ms/step - loss: 0.0764\n",
      "Epoch 408/800\n",
      "1/1 [==============================] - 0s 65us/step - loss: 0.0950\n",
      "Epoch 409/800\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0423Restoring model weights from the end of the best epoch.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 6ms/step - loss: 0.0423\n",
      "Epoch 00409: early stopping\n",
      "best epoch =  319\n",
      "smallest loss = 0.022285357117652893\n",
      "INFO:tensorflow:Assets written to: ./best_model\\assets\n"
     ]
    }
   ],
   "source": [
    "#After the compilation of the model, we’ll use the fit method with 500 epochs.\n",
    "#I started with epochs value of 100 and then tested the model after training.\n",
    "#The prediction was not that good. Then I modified the number of epochs to 200 and tested the model again.\n",
    "#Accuracy had improved slightly, but figured I’d give it one more try. Finally, at 500 epochs\n",
    "#I found acceptable prediction accuracy.\n",
    "#The fit method takes three parameters; namely, x, y, and number of epochs.\n",
    "#During model training, if all the batches of data are seen by the model once,\n",
    "#we say that one epoch has been completed.\n",
    "# Add an early stopping callback\n",
    "es = keras.callbacks.EarlyStopping(\n",
    "monitor='loss',\n",
    "mode='min',\n",
    "patience = 90,\n",
    "restore_best_weights = True,\n",
    "verbose=1)\n",
    "# Add a checkpoint where loss is minimum, and save that model\n",
    "mc = keras.callbacks.ModelCheckpoint('best_model.SB', monitor='loss',\n",
    "mode='min', verbose=1, save_best_only=True)\n",
    "historyData = model.fit(xarray,yarray,epochs=800,callbacks=[es])\n",
    "loss_hist = historyData.history['loss']\n",
    "#The above line will return a dictionary, access it's info like this:\n",
    "best_epoch = np.argmin(historyData.history['loss']) + 1\n",
    "print ('best epoch = ', best_epoch)\n",
    "print('smallest loss =', np.min(loss_hist))\n",
    "model.save('./best_model')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9137a44d",
   "metadata": {},
   "source": [
    "## (e) Training Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "bb462f98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.22396114]\n",
      " [0.87684835]\n",
      " [0.57053427]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mdot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.644843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.317445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.006998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.008559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.495681</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       mdot\n",
       "0  0.644843\n",
       "1  1.317445\n",
       "2  1.006998\n",
       "3  1.008559\n",
       "4  1.495681"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(validation_output)\n",
    "y_predictions_df = pd.DataFrame(model.predict(x_train), columns=['mdot'])\n",
    "y_predictions_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "e08ec1a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mdot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.637669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.243497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.008851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.027091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.472639</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       mdot\n",
       "0  0.637669\n",
       "1  1.243497\n",
       "2  1.008851\n",
       "3  1.027091\n",
       "4  1.472639"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_recorded_df = y_train\n",
    "y_recorded_df[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51d43d7a",
   "metadata": {},
   "source": [
    "### MAE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "dc7cb7b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 0.023709760831454804\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "mae = mean_absolute_error(y_recorded_df['mdot'], y_predictions_df['mdot'])\n",
    "print(f'MAE: {mae}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24b4bcb6",
   "metadata": {},
   "source": [
    "### Log-log Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "929d90c7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\GUTIE\\anaconda3\\envs\\Python3-7_Keras_env\\lib\\site-packages\\ipykernel_launcher.py:49: UserWarning: Attempted to set non-positive left xlim on a log-scaled axis.\n",
      "Invalid limit will be ignored.\n",
      "C:\\Users\\GUTIE\\anaconda3\\envs\\Python3-7_Keras_env\\lib\\site-packages\\ipykernel_launcher.py:50: UserWarning: Attempted to set non-positive bottom ylim on a log-scaled axis.\n",
      "Invalid limit will be ignored.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "logLogPlotter(y_recorded_df['mdot'], y_predictions_df['mdot'], -0.5, 1.5, -0.5, 1.5, 'mdot', 'mdot', '')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4e7f3e2",
   "metadata": {},
   "source": [
    "## (f) Validation Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "7ee9a550",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mdot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.316699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.834409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.599393</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       mdot\n",
       "0  1.316699\n",
       "1  0.834409\n",
       "2  0.599393"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predictions_df = pd.DataFrame(model.predict(x_validate), columns=['mdot'])\n",
    "y_predictions_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "53231db0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mdot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.223961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.876848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.570534</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       mdot\n",
       "0  1.223961\n",
       "1  0.876848\n",
       "2  0.570534"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_recorded_df = y_validate\n",
    "y_recorded_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "01a8b3ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\GUTIE\\anaconda3\\envs\\Python3-7_Keras_env\\lib\\site-packages\\ipykernel_launcher.py:49: UserWarning: Attempted to set non-positive left xlim on a log-scaled axis.\n",
      "Invalid limit will be ignored.\n",
      "C:\\Users\\GUTIE\\anaconda3\\envs\\Python3-7_Keras_env\\lib\\site-packages\\ipykernel_launcher.py:50: UserWarning: Attempted to set non-positive bottom ylim on a log-scaled axis.\n",
      "Invalid limit will be ignored.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "logLogPlotter(y_recorded_df['mdot'], y_predictions_df['mdot'], -0.5, 2, -0.5, 2, 'mdot', 'mdot', '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "21b72790",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 0.06365725693105287\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "mae = mean_absolute_error(y_recorded_df['mdot'], y_predictions_df['mdot'])\n",
    "print(f'MAE: {mae}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "1a99b435",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Incident solar flux (kW/m2)')"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test = []\n",
    "numeriter=10\n",
    "outpt1=np.zeros((numeriter,numeriter))\n",
    "outpt2=np.zeros((numeriter,numeriter))\n",
    "\n",
    "#normalized\n",
    "#Di=0.01\n",
    "#DiNorm=Di/xdata_df.median()['Di']\n",
    "qodot=np.linspace(500,800,numeriter)\n",
    "qoNorm=qodot/xdata_df.median()['qoflux']\n",
    "\n",
    "for i in range(len(qodot)):\n",
    "    #for j in range(len(mdot)):\n",
    "    test = [[0.01/xdata_df.median()['Di'] , qoNorm[i], 0.7/xdata_df.median()['xe'], 300/xdata_df.median()['Tw']]]\n",
    "    testarray = np.array(test)\n",
    "    a= model.predict(testarray)\n",
    "    outpt1[i] = a[0]\n",
    "#         if np.abs(outpt2[i, j]*304.7 - 310) < 1:\n",
    "#             print(f\"Adjusted outpt1 value close to 310 found: {outpt2[i, j]*304.7}\")\n",
    "#             print(f\"Corresponding test array: {testarray}\")\n",
    "\n",
    "outpt1=outpt1*ydata_df.median()['mdot'] #check\n",
    "\n",
    "plt.plot(qodot, outpt1, color='red')\n",
    "font_family = 'Times New Roman'\n",
    "title_font_size=17\n",
    "label_font_size=15\n",
    "legend_tick_font_size=12\n",
    "\n",
    "plt.title('Mass flow rate versus incident solar flux', fontsize=title_font_size, fontfamily=font_family)\n",
    "plt.xlabel('Mass flow rate (kg/s)', fontsize=label_font_size, fontfamily=font_family)\n",
    "plt.ylabel('Incident solar flux (kW/m2)', fontsize=label_font_size, fontfamily=font_family)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a323af8c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
